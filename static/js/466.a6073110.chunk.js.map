{"version":3,"file":"static/js/466.a6073110.chunk.js","mappings":"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","sources":["webpack://blog-admin-app/./src/pages/css/Posts.module.css?f907","components/Table.jsx","pages/Posts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Posts_container__Mfd9a\",\"refresh\":\"Posts_refresh__5Lf7l\",\"action_button\":\"Posts_action_button__LAnmD\"};","import \"./css/Table.css\";\r\n\r\nconst Table = (props) => {\r\n  let topMargin = \"mt-5\";\r\n  if (props.styling === \"reports\") topMargin = null;\r\n\r\n  return (\r\n    <table\r\n      className={`${props.styling} table table-borderless table-hover ${topMargin}`}\r\n      hidden={props.hidden}\r\n    >\r\n      {props.children}\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTable } from \"react-table\";\r\nimport AuthContext from \"../context/AuthProvider\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport styles from \"./css/Posts.module.css\";\r\nimport Search from \"../components/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport dayjs from \"dayjs\";\r\nimport * as FiIcon from \"react-icons/fi\";\r\nimport Table from \"../components/Table\";\r\nimport post from \"../api/post\";\r\nimport { postActions } from \"../store/postsSlice\";\r\n\r\nconst Posts = () => {\r\n  const dispatch = useDispatch();\r\n  const authCtx = useContext(AuthContext);\r\n  const accessToken = authCtx.token;\r\n  const domain = authCtx.domain;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const posts = useSelector((state) => state.postsDisplay.allPosts);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const edit_post = (post_item) => {\r\n    navigate(`/admin/posts/${post_item.id}`, {\r\n      state: { ...post_item },\r\n    });\r\n  };\r\n\r\n  const delete_post = async (id) => {\r\n    setIsLoading(true);\r\n    const response = await post.deletePost(id, domain, accessToken);\r\n    if (!response.ok) return console.log(\"delete failed\");\r\n\r\n    dispatch(postActions.deletePost(id));\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const publish_post = async (id) => {\r\n    setIsLoading(true);\r\n    const response = await post.togglePublish(id, domain, accessToken);\r\n    if (!response.ok) return console.log(\"toggle publish error\");\r\n\r\n    dispatch(postActions.updatePost(response.data.data));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Title\",\r\n        accessor: \"title\",\r\n      },\r\n      {\r\n        Header: \"Category\",\r\n        accessor: \"category\",\r\n      },\r\n      {\r\n        Header: \"Published\",\r\n        accessor: \"published\",\r\n        Cell: (props) => (props.value == true ? \"Published\" : \"Not Published\"),\r\n      },\r\n      {\r\n        Header: \"Visible\",\r\n        accessor: \"visible\",\r\n        Cell: (props) => (props.value == true ? \"Visible\" : \"Not Visible\"),\r\n      },\r\n      {\r\n        Header: \"Created\",\r\n        accessor: \"created_at\",\r\n        // Cell: (props) => dayjs(props.value).format(\"DD-MMM-YYYY\"),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const data = useMemo(() => [...posts], [posts]);\r\n\r\n  const tableHooks = (hooks) => {\r\n    hooks.visibleColumns.push((columns) => [\r\n      ...columns,\r\n      {\r\n        id: \"Publish\",\r\n        Header: \"Call to Action\",\r\n        Cell: ({ row }) => (\r\n          <>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn ${styles.action_button}`}\r\n              onClick={() => edit_post(row.original)}\r\n            >\r\n              Edit\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn ${styles.action_button}`}\r\n              onClick={() => publish_post(row.original.id)}\r\n            >\r\n              {row.original.published ? \"Take Down\" : \"Publish\"}\r\n            </button>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className={`btn ${styles.action_button}`}\r\n              onClick={() => delete_post(row.original.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </>\r\n        ),\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const tableInstance = useTable({ columns, data }, tableHooks);\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    tableInstance;\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <LoadingSpinner />}\r\n      <div className={styles.container}>\r\n        <h1>Posts</h1>{\" \"}\r\n        <button type=\"button\" onClick={() => navigate(\"/admin/posts/add\")}>\r\n          Create new Post\r\n        </button>\r\n        {posts.length !== 0 ? (\r\n          <Table styling={\"reports\"} {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map((column) => (\r\n                    <th {...column.getHeaderProps()}>\r\n                      {column.render(\"Header\")}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {rows.map((row) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell, idx) => (\r\n                      <td {...cell.getCellProps()}> {cell.render(\"Cell\")}</td>\r\n                    ))}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        ) : (\r\n          <div>You have made no posts</div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n"],"names":["props","topMargin","styling","className","hidden","children","dispatch","useDispatch","authCtx","useContext","AuthContext","accessToken","token","domain","useState","isLoading","setIsLoading","posts","useSelector","state","postsDisplay","allPosts","navigate","useNavigate","delete_post","id","post","ok","console","log","postActions","publish_post","response","data","columns","useMemo","Header","accessor","Cell","value","tableInstance","useTable","hooks","visibleColumns","push","row","type","styles","onClick","post_item","original","published","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","LoadingSpinner","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","idx","getCellProps"],"sourceRoot":""}