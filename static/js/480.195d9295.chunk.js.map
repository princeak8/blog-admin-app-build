{"version":3,"file":"static/js/480.195d9295.chunk.js","mappings":"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","sources":["pages/Dashboard.jsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport AuthContext from \"../context/AuthProvider\";\r\nimport styles from \"./css/Dashboard.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useLocation, NavLink, useNavigate } from \"react-router-dom\";\r\nimport PostsSection from \"../components/PostsSection\";\r\nimport { Request } from \"../api\";\r\n\r\nimport { Capitalize } from \"../utils/helpers\";\r\nimport * as ImIcon from \"react-icons/im\";\r\n\r\nconst Dashboard = () => {\r\n    const navigate = useNavigate();\r\n    const authCtx = useContext(AuthContext);\r\n    const [state, setState] = useState({activeTab: \"public\", loaded: false, posts: '', error: '', actionError: ''})\r\n    const isLoading = useSelector((state) => state.userDisplay.isLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const token = authCtx.token;\r\n    const domain = authCtx.domain;\r\n    const auth = { token, domain};\r\n    //const posts = useSelector((state) => state.postsDisplay.allPosts);\r\n    useEffect(() => {\r\n        getPosts();\r\n    }, []);\r\n    //console.log('posts: ', posts);\r\n    //console.log('unpublished', unpublished);\r\n\r\n    const getPosts = async () => {\r\n        const res = await Request('GET', '/post/all', auth);\r\n        if(res.status==200) {\r\n            setState({...state, loaded: true, posts: res.data})\r\n        }else{\r\n            if(res.status==401) authCtx.logout(); navigate('/admin/login');\r\n            setState({...state, loaded: true, error: res.message})\r\n        }\r\n    }\r\n    \r\n\r\n  const switchTab = (tab) => {\r\n      //console.log('tab: ', tab);\r\n      setState({...state, activeTab: tab});\r\n  }\r\n\r\n  const getStyle = (tab, last=false) => {\r\n      return (tab==state.activeTab) ? selectedTabStyle : (!last) ? tabStyle : {cursor: \"pointer\"};\r\n  }\r\n\r\n  const renderContent = () => {\r\n        if(state.loaded) {\r\n            if(state.error != '') {\r\n                return (\r\n                    <p className=\"alert alert-danger\">{state.error}</p>\r\n                );\r\n            }else{\r\n                const publicPosts = state.posts.filter((post) => (post.published && post.visible));\r\n                const unpublished = state.posts.filter((post) => (!post.published));\r\n                const hidden = state.posts.filter((post) => (!post.visible));\r\n                // console.log('public posts: ', publicPosts.length);\r\n                // console.log('hidden posts: ', hidden.length);\r\n                // console.log('unpublished posts: ', unpublished.length);\r\n            \r\n                switch(state.activeTab) {\r\n                    case 'public' : return <PostsSection posts={publicPosts} publish={publish} visibility={visibility}/>; break;\r\n                    case 'unpublished' : return <PostsSection posts={unpublished} publish={publish} visibility={visibility}/>; break;\r\n                    case 'hidden' : return <PostsSection posts={hidden} publish={publish} visibility={visibility}/>; break;\r\n                    //default : return <PostsSection posts={publicPosts}/>;\r\n                }\r\n            }\r\n        }else{\r\n            return (<div style={{marginTop:'5em', textAlign: 'center'}}>LOADING...</div>);\r\n        }\r\n  }\r\n\r\n  const publish = async (postId) => {\r\n    //Publish post\r\n    if(window.confirm(\"You are about to Publish this post.. Go Ahead?\")) {\r\n        await performAction('publish', postId);\r\n    }\r\n}\r\n\r\nconst visibility = async (postId) => {\r\n    //Toggle post visibility\r\n    if(window.confirm(\"Are you sure you want to change the visibility of this post?\")) {\r\n        await performAction('visibility', postId);\r\n    }\r\n}\r\n\r\nconst performAction = async (action, postId) => {\r\n    let res = '';\r\n    switch(action) {\r\n        case 'publish' : res = await Request('GET', '/post/toggle_publish/'+postId, auth);\r\n        case 'visibility' : res = await Request('GET', '/post/toggle_visibility/'+postId, auth);\r\n    }\r\n    if(res != '') {\r\n        if(res.status==200) {\r\n            state.posts.map((post, index) => {\r\n                if(post.id==res.data.id) {\r\n                    console.log('replace data');\r\n                    state.posts[index] = res.data;\r\n                }\r\n            })\r\n            setState({...state, posts: state.posts}); \r\n        }else{\r\n            setState({...state, actionError: res.message})\r\n        }\r\n    }\r\n}\r\n\r\n  const myStyles = {\r\n      tabContainerStyle: {display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\"},\r\n      tabStyle: {borderRight:\"medium solid #000\", width:\"25%\", textAlign: \"center\", cursor: \"pointer\"},\r\n      selectedTabStyle: {width:\"25%\", textAlign: \"center\", backgroundColor: \"grey\"}\r\n  };\r\n\r\n  const { tabStyle, tabContainerStyle, selectedTabStyle } = myStyles;\r\n\r\n  return (\r\n    <div className={styles[\"container-fluid\"]}>\r\n        <div style={{marginBottom: \"4em\"}}>\r\n            <h1 style={{marginBottom:\"1em\"}}>Dashboard</h1>\r\n            <Link to=\"/admin/posts/add\"><h3 style={{marginLeft: \"5%\", textDecorationLine: \"underline\"}}>New Post</h3></Link>\r\n        </div>\r\n        <div style={tabContainerStyle}>\r\n            <p style={getStyle('public')} onClick={() => switchTab('public')}>\r\n                Public\r\n            </p>\r\n            <p style={getStyle('unpublished')} onClick={() => switchTab('unpublished')}>\r\n                Unpublished\r\n            </p>\r\n            <p style={getStyle('hidden', true)} onClick={() => switchTab('hidden')}>\r\n                Hidden\r\n            </p>\r\n        </div>\r\n        \r\n        {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["navigate","useNavigate","authCtx","useContext","AuthContext","useState","activeTab","loaded","posts","error","actionError","state","setState","auth","useSelector","userDisplay","isLoading","useDispatch","token","domain","useEffect","getPosts","Request","res","status","data","logout","message","switchTab","tab","getStyle","last","selectedTabStyle","cursor","tabStyle","publish","postId","window","confirm","performAction","visibility","action","map","post","index","id","console","log","borderRight","width","textAlign","tabContainerStyle","display","flexDirection","justifyContent","backgroundColor","className","styles","style","marginBottom","to","marginLeft","textDecorationLine","onClick","marginTop","publicPosts","filter","published","visible","unpublished","hidden","renderContent"],"sourceRoot":""}